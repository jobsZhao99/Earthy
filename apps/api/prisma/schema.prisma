
generator client {
  provider   = "prisma-client-js"
  engineType = "binary"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum BookingRecordType {
  NEW
  UPDATE
  CANCEL
  EXTEND
  SHORTEN
  TRANSFER_OUT
  TRANSFER_IN
}

enum BookingStatus {
  CONFIRMED        // 已预订但未入住
  CHECKED_IN    // 已入住
  CHECKED_OUT   // 已退房
  CANCELLED     // 已取消
}


model Setting {
  id      String   @id @default(cuid())
  key     String   @unique
  value   Json     // 存任意 JSON，比如颜色配置
  updatedAt DateTime @updatedAt
}



// 金额口径：收入正数，费用负数。periodMonth 统一存当月 UTC 月初。
enum AccountCode {
  RENT    // 当期应计租金收入
  PARKING
  BEDDING
  CLEANING
  OTHERS
}


enum RoomStatus {
  OCCUPIED             // 已入住
  CHECKED_OUT_DIRTY          // 已退房，但还没清洁
  CLEANING_SCHEDULED   // 已安排清洁，但还没完成
  CLEANED              // 已清洁，随时可用


  ON_HOLD              // 暂时锁定，不对外出租（例如维修/房东保留）
  MAINTENANCE          // 维修中
  OFF_MARKET           // 永久下架，不对外出租
  LONG_TERM           // 长租中
}



model Ledger {
  id        String   @id @default(cuid())
  name      String   @unique
  properties Property[] 
  journalEntries JournalEntry[]
  // 可选：currency, timezone, companyId 等
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ledgerUsers LedgerUser[]
}

model Channel {
  id    String  @id @default(cuid())
  label String          @unique  // 比如 "Airbnb 短租平台"
  bookings Booking[]
}

model Property {
  id        String   @id @default(cuid())
  name      String
  address   String?
  ledgerId   String // 多账簿支持
  ledger  Ledger @relation(fields: [ledgerId], references: [id])
  
  rooms     Room[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@unique([ledgerId, name])
  @@index([ledgerId])
}

model Room {
  id          String   @id @default(cuid())
  propertyId  String
  property    Property @relation(fields: [propertyId], references: [id])

  label       String
  nightlyRateCents Int? 

  bookings    Booking[]

  roomStatus RoomStatus @default(CHECKED_OUT_DIRTY)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  tag       String?  @default("") // 自定义标签

  @@unique([propertyId, label])
}


model Guest {
    id        String   @id @default(cuid())
    name      String
    phone     String?
    email     String?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt 

    bookings  Booking[]

}

// 租客预订记录, 包含新预订、退房、取消等状态
model BookingRecord {
  id              String   @id @default(cuid())
  bookingId       String
  type            BookingRecordType @default(NEW)  // NEW, CANCEL, UPDATE 等

  // 差值字段：和上一次状态相比
  guestDeltaCents Int?    // 租客支付的变动额
  payoutDeltaCents Int?   // 房东净收入的变动额

  rangeStart      DateTime?  // 变动的起点
  rangeEnd        DateTime?  // 变动的终点

  createdAt       DateTime @default(now())
  memo            String? @db.Text

  booking Booking @relation(fields: [bookingId], references: [id])
  journalLines JournalLine[]

  createdByUserId String?
  createdByUser   User? @relation(fields: [createdByUserId], references: [id])
}

model Booking {
  id              String   @id @default(cuid())
  roomId          String
  status          BookingStatus @default(CONFIRMED) // CONFIRMED, CHECKED_IN, CHECKED_OUT, CANCELLED
  guestId         String
  checkIn         DateTime
  checkOut        DateTime

  guestTotalCents Int?      // 最终租客支付总额（Gross）
  payoutCents     Int?      // 最终房东净收入（Host Payout）

  channelId       String 
  channel   Channel @relation(fields: [channelId], references: [id])
  externalRef     String?  // 渠道订单号或合同号
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  memo            String?   @db.Text

  room   Room   @relation(fields: [roomId], references: [id])
  guest  Guest  @relation(fields: [guestId], references: [id])
  bookingRecords BookingRecord[]

  @@unique([externalRef, channelId,roomId]) // 同一渠道同一房间同一订单号只能有一条
  @@index([externalRef, channelId])

  @@index([roomId, guestId])
}



model JournalEntry {
  id          String    @id @default(cuid())
  periodMonth DateTime  // 该月1号(UTC)
  ledgerId    String
  ledger      Ledger    @relation(fields: [ledgerId], references: [id])
  memo        String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  journalLines       JournalLine[]


  @@unique([periodMonth, ledgerId]) // 每月一条总分录（够用了；多账簿可改为 periodMonth+ledger）
  @@index([periodMonth])
}

model JournalLine {
  id           String    @id @default(cuid())
  journalId    String 
  journal  JournalEntry @relation(fields: [journalId], references: [id])


  bookingRecordId    String
  bookingRecord      BookingRecord   @relation(fields: [bookingRecordId], references: [id])


  account      AccountCode
  amountCents  Int  // 收入正数，费用负数
  createdAt    DateTime  @default(now())


  // 幂等过账关键：同一 booking、同一科目、同一会计月只有一条
  @@unique([bookingRecordId, account,journalId])
  @@index([account,journalId])
}




model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String   // 存哈希
  name      String?
  phone     String?

  role      UserRole @default(STAFF)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // 可选：关联 Ledger（多账簿支持）
  ledgerUsers LedgerUser[]
  bookingRecordsCreated BookingRecord[]

}

enum UserRole {
  ADMIN      // 系统管理员，最高权限
  MANAGER    // 管理账簿、房源
  STAFF      // 一般员工，只能看部分数据
  VIEWER     // 只读
}

model LedgerUser {
  id        String @id @default(cuid())
  ledgerId  String
  ledger    Ledger @relation(fields: [ledgerId], references: [id])

  userId    String
  user      User   @relation(fields: [userId], references: [id])

  role      UserRole @default(VIEWER)

  @@unique([ledgerId, userId])  // 一个账簿下一个人只有一个身份
}